
    public async Task DeleteProjectAsync(int ProjectId)
    {
        //Generated using APIServiceBuilder            
        if (!await _userService.DoesUserHaveSubscriptionAdminThisProjectAsync())
                throw new AuthorizationException("A user must be subscription administrator on the same subscription as the project to delete it.");
        using (var _tx = _context.Database.CurrentTransaction ?? await _context.Database.BeginTransactionAsync())
        {
            try
            {
                await _context.SetAllForeignKeysToNullExceptProject_BatchAsync<ChecklistUser>(x => x.LotItp.Lot.ProjectId == ProjectId);
await _context.SetAllForeignKeysToNullExceptProject_BatchAsync<ForecastCashflow>(x => x.ForecastDetail.ForecastVersion.ProjectId == ProjectId);
await _context.SetAllForeignKeysToNullExceptProject_BatchAsync<ForecastCostEstimate>(x => x.ForecastDetail.ForecastVersion.ProjectId == ProjectId);
await _context.SetAllForeignKeysToNullExceptProject_BatchAsync<LotItpQty>(x => x.LotItp.Lot.ProjectId == ProjectId);
await _context.SetAllForeignKeysToNullExceptProject_BatchAsync<RiskHazard>(x => x.RiskActivityStep.RiskActivity.ProjectId == ProjectId);
await _context.SetAllForeignKeysToNullExceptProject_BatchAsync<TestResult>(x => x.TestRequestTest.TestRequest.ProjectId == ProjectId);
await _context.SetAllForeignKeysToNullExceptProject_BatchAsync<WorkflowActionPoint>(x => x.WorkflowAction.Workflow.ProjectId == ProjectId);
await _context.SetAllForeignKeysToNullExceptProject_BatchAsync<WorkflowActionRole>(x => x.WorkflowAction.Workflow.ProjectId == ProjectId);
await _context.SetAllForeignKeysToNullExceptProject_BatchAsync<WorkflowActionUser>(x => x.WorkflowAction.Workflow.ProjectId == ProjectId);
await _context.SetAllForeignKeysToNullExceptProject_BatchAsync<LotDoc>(x=> x.#.ProjectId == ProjectId);
await _context.SetAllForeignKeysToNullExceptProject_BatchAsync<Notification>(x=> x.#.ProjectId == ProjectId);
await _context.SetAllForeignKeysToNullExceptProject_BatchAsync<ApprovalCc>(x=>(x.Approval.ProjectId == ProjectId));
await _context.SetAllForeignKeysToNullExceptProject_BatchAsync<ApprovalEmail>(x=>(x.Approval.ProjectId == ProjectId) || (x.EmailLog.ProjectId == ProjectId));
await _context.SetAllForeignKeysToNullExceptProject_BatchAsync<ApprovalItpDetail>(x=>(x.Approval.ProjectId == ProjectId));
await _context.SetAllForeignKeysToNullExceptProject_BatchAsync<ApprovalLot>(x=>(x.Approval.ProjectId == ProjectId) || (x.Lot.ProjectId == ProjectId));
await _context.SetAllForeignKeysToNullExceptProject_BatchAsync<ApprovalLotItpDetail>(x=>(x.Approval.ProjectId == ProjectId));
await _context.SetAllForeignKeysToNullExceptProject_BatchAsync<ApprovalLotQty>(x=>(x.Approval.ProjectId == ProjectId));
await _context.SetAllForeignKeysToNullExceptProject_BatchAsync<ApprovalNcr>(x=>(x.Approval.ProjectId == ProjectId) || (x.Ncr.ProjectId == ProjectId));
await _context.SetAllForeignKeysToNullExceptProject_BatchAsync<ApprovalTo>(x=>(x.Approval.ProjectId == ProjectId));
await _context.SetAllForeignKeysToNullExceptProject_BatchAsync<ApprovalWorkflowAddressee>(x=>(x.ApprovalWorkflow.ProjectId == ProjectId));
await _context.SetAllForeignKeysToNullExceptProject_BatchAsync<AtpLot>(x=>(x.Atp.ProjectId == ProjectId) || (x.Lot.ProjectId == ProjectId));
await _context.SetAllForeignKeysToNullExceptProject_BatchAsync<CnApproval>(x=>(x.Approval.ProjectId == ProjectId) || (x.ContractNotice.ProjectId == ProjectId));
await _context.SetAllForeignKeysToNullExceptProject_BatchAsync<CnControlledDoc>(x=>(x.ContractNotice.ProjectId == ProjectId) || (x.CpDocument.ProjectId == ProjectId));
await _context.SetAllForeignKeysToNullExceptProject_BatchAsync<CnEmail>(x=>(x.ContractNotice.ProjectId == ProjectId) || (x.EmailLog.ProjectId == ProjectId));
await _context.SetAllForeignKeysToNullExceptProject_BatchAsync<CnIncident>(x=>(x.ContractNotice.ProjectId == ProjectId) || (x.Incident.ProjectId == ProjectId));
await _context.SetAllForeignKeysToNullExceptProject_BatchAsync<CnInstruction>(x=>(x.ContractNotice.ProjectId == ProjectId) || (x.Instruction.ProjectId == ProjectId));
await _context.SetAllForeignKeysToNullExceptProject_BatchAsync<CnItp>(x=>(x.ContractNotice.ProjectId == ProjectId) || (x.Itp.ProjectId == ProjectId));
await _context.SetAllForeignKeysToNullExceptProject_BatchAsync<CnLot>(x=>(x.ContractNotice.ProjectId == ProjectId) || (x.Lot.ProjectId == ProjectId));
await _context.SetAllForeignKeysToNullExceptProject_BatchAsync<CnNotice>(x=>(x.ContractNotice_CnId1.ProjectId == ProjectId) || (x.ContractNotice_CnId2.ProjectId == ProjectId));
await _context.SetAllForeignKeysToNullExceptProject_BatchAsync<CnPhoto>(x=>(x.ContractNotice.ProjectId == ProjectId) || (x.Photo.ProjectId == ProjectId));
await _context.SetAllForeignKeysToNullExceptProject_BatchAsync<CnResponse>(x=>(x.ContractNotice.ProjectId == ProjectId));
await _context.SetAllForeignKeysToNullExceptProject_BatchAsync<CnTo>(x=>(x.ContractNotice.ProjectId == ProjectId));
await _context.SetAllForeignKeysToNullExceptProject_BatchAsync<CnVariation>(x=>(x.ContractNotice.ProjectId == ProjectId) || (x.Variation.ProjectId == ProjectId));
await _context.SetAllForeignKeysToNullExceptProject_BatchAsync<ControlLinePoint>(x=>(x.ControlLine.ProjectId == ProjectId));
await _context.SetAllForeignKeysToNullExceptProject_BatchAsync<CostCodeCustomRegItem>(x=>(x.CostCode.ProjectId == ProjectId));
await _context.SetAllForeignKeysToNullExceptProject_BatchAsync<CustomRegisterItem>(x=>(x.CustomRegister.ProjectId == ProjectId));
await _context.SetAllForeignKeysToNullExceptProject_BatchAsync<DaycostCostCode>(x=>(x.CostCode.ProjectId == ProjectId) || (x.DayCost.ProjectId == ProjectId));
await _context.SetAllForeignKeysToNullExceptProject_BatchAsync<Distribution>(x=>(x.CpDocument.ProjectId == ProjectId));
await _context.SetAllForeignKeysToNullExceptProject_BatchAsync<ForecastDetail>(x=>(x.CostCode.ProjectId == ProjectId) || (x.ForecastVersion.ProjectId == ProjectId));
await _context.SetAllForeignKeysToNullExceptProject_BatchAsync<ForecastWinLoss>(x=>(x.ForecastVersion.ProjectId == ProjectId));
await _context.SetAllForeignKeysToNullExceptProject_BatchAsync<ForecastWlDistro>(x=>(x.CostCode.ProjectId == ProjectId));
await _context.SetAllForeignKeysToNullExceptProject_BatchAsync<FsApproval>(x=>(x.Approval.ProjectId == ProjectId) || (x.FileStoreDoc.ProjectId == ProjectId));
await _context.SetAllForeignKeysToNullExceptProject_BatchAsync<FsDoc>(x=>(x.CpDocument.ProjectId == ProjectId) || (x.FileStoreDoc.ProjectId == ProjectId));
await _context.SetAllForeignKeysToNullExceptProject_BatchAsync<FsEmail>(x=>(x.EmailLog.ProjectId == ProjectId) || (x.FileStoreDoc.ProjectId == ProjectId));
await _context.SetAllForeignKeysToNullExceptProject_BatchAsync<FsIncident>(x=>(x.FileStoreDoc.ProjectId == ProjectId) || (x.Incident.ProjectId == ProjectId));
await _context.SetAllForeignKeysToNullExceptProject_BatchAsync<FsInstruction>(x=>(x.FileStoreDoc.ProjectId == ProjectId) || (x.Instruction.ProjectId == ProjectId));
await _context.SetAllForeignKeysToNullExceptProject_BatchAsync<FsLot>(x=>(x.FileStoreDoc.ProjectId == ProjectId) || (x.Lot.ProjectId == ProjectId));
await _context.SetAllForeignKeysToNullExceptProject_BatchAsync<FsNcr>(x=>(x.FileStoreDoc.ProjectId == ProjectId) || (x.Ncr.ProjectId == ProjectId));
await _context.SetAllForeignKeysToNullExceptProject_BatchAsync<FsNotice>(x=>(x.ContractNotice.ProjectId == ProjectId) || (x.FileStoreDoc.ProjectId == ProjectId));
await _context.SetAllForeignKeysToNullExceptProject_BatchAsync<FsPurchaseOrder>(x=>(x.FileStoreDoc.ProjectId == ProjectId) || (x.PurchaseOrder.ProjectId == ProjectId));
await _context.SetAllForeignKeysToNullExceptProject_BatchAsync<FsSupplier>(x=>(x.FileStoreDoc.ProjectId == ProjectId) || (x.Supplier.ProjectId == ProjectId));
await _context.SetAllForeignKeysToNullExceptProject_BatchAsync<FsTestReq>(x=>(x.FileStoreDoc.ProjectId == ProjectId) || (x.TestRequest.ProjectId == ProjectId));
await _context.SetAllForeignKeysToNullExceptProject_BatchAsync<FsVariation>(x=>(x.FileStoreDoc.ProjectId == ProjectId) || (x.Variation.ProjectId == ProjectId));
await _context.SetAllForeignKeysToNullExceptProject_BatchAsync<FsWorkflowLog>(x=>(x.FileStoreDoc.ProjectId == ProjectId));
await _context.SetAllForeignKeysToNullExceptProject_BatchAsync<ImageLayerPoint>(x=>(x.ImageLayer.ProjectId == ProjectId));
await _context.SetAllForeignKeysToNullExceptProject_BatchAsync<IncidentPerson>(x=>(x.Incident.ProjectId == ProjectId));
await _context.SetAllForeignKeysToNullExceptProject_BatchAsync<InvoiceDispute>(x=>(x.Invoice.ProjectId == ProjectId));
await _context.SetAllForeignKeysToNullExceptProject_BatchAsync<InvoiceOrder>(x=>(x.Invoice.ProjectId == ProjectId) || (x.PurchaseOrder.ProjectId == ProjectId));
await _context.SetAllForeignKeysToNullExceptProject_BatchAsync<InvoiceRetention>(x=>(x.Invoice.ProjectId == ProjectId));
await _context.SetAllForeignKeysToNullExceptProject_BatchAsync<ItpDetail>(x=>(x.Itp.ProjectId == ProjectId));
await _context.SetAllForeignKeysToNullExceptProject_BatchAsync<ItpDetailWorkflow>(x=>(x.ApprovalWorkflow.ProjectId == ProjectId));
await _context.SetAllForeignKeysToNullExceptProject_BatchAsync<ItpScheduleItem>(x=>(x.Itp.ProjectId == ProjectId) || (x.ScheduleItem.ProjectId == ProjectId));
await _context.SetAllForeignKeysToNullExceptProject_BatchAsync<LotCoordinate>(x=>(x.Lot.ProjectId == ProjectId));
await _context.SetAllForeignKeysToNullExceptProject_BatchAsync<LotCustomRegItem>(x=>(x.Lot.ProjectId == ProjectId));
await _context.SetAllForeignKeysToNullExceptProject_BatchAsync<LotInstruction>(x=>(x.Instruction.ProjectId == ProjectId) || (x.Lot.ProjectId == ProjectId));
await _context.SetAllForeignKeysToNullExceptProject_BatchAsync<LotItp>(x=>(x.Itp.ProjectId == ProjectId) || (x.Lot.ProjectId == ProjectId));
await _context.SetAllForeignKeysToNullExceptProject_BatchAsync<LotItpDetail>(x=>(x.ApprovalAtp.ProjectId == ProjectId) || (x.Approval.ProjectId == ProjectId) || (x.ApprovalLot.ProjectId == ProjectId) || (x.Ncr.ProjectId == ProjectId));
await _context.SetAllForeignKeysToNullExceptProject_BatchAsync<LotQuantity>(x=>(x.Lot.ProjectId == ProjectId) || (x.Ncr.ProjectId == ProjectId) || (x.ScheduleItem.ProjectId == ProjectId) || (x.Variation.ProjectId == ProjectId));
await _context.SetAllForeignKeysToNullExceptProject_BatchAsync<LotRelation>(x=>(x.Lot1.ProjectId == ProjectId) || (x.Lot2.ProjectId == ProjectId));
await _context.SetAllForeignKeysToNullExceptProject_BatchAsync<LotTag>(x=>(x.Lot.ProjectId == ProjectId) || (x.TagCode.ProjectId == ProjectId));
await _context.SetAllForeignKeysToNullExceptProject_BatchAsync<LotUser>(x=>(x.Lot.ProjectId == ProjectId));
await _context.SetAllForeignKeysToNullExceptProject_BatchAsync<NcrDocument>(x=>(x.CpDocument.ProjectId == ProjectId) || (x.Ncr.ProjectId == ProjectId));
await _context.SetAllForeignKeysToNullExceptProject_BatchAsync<NcrLot>(x=>(x.Lot.ProjectId == ProjectId) || (x.Ncr.ProjectId == ProjectId));
await _context.SetAllForeignKeysToNullExceptProject_BatchAsync<PhotoChecklistItem>(x=>(x.Photo.ProjectId == ProjectId));
await _context.SetAllForeignKeysToNullExceptProject_BatchAsync<PhotoIncident>(x=>(x.Incident.ProjectId == ProjectId) || (x.Photo.ProjectId == ProjectId));
await _context.SetAllForeignKeysToNullExceptProject_BatchAsync<PhotoLot>(x=>(x.Lot.ProjectId == ProjectId) || (x.Photo.ProjectId == ProjectId));
await _context.SetAllForeignKeysToNullExceptProject_BatchAsync<PhotoNcr>(x=>(x.Ncr.ProjectId == ProjectId) || (x.Photo.ProjectId == ProjectId));
await _context.SetAllForeignKeysToNullExceptProject_BatchAsync<PhotoVariation>(x=>(x.Photo.ProjectId == ProjectId) || (x.Variation.ProjectId == ProjectId));
await _context.SetAllForeignKeysToNullExceptProject_BatchAsync<PoEmail>(x=>(x.EmailLog.ProjectId == ProjectId) || (x.PurchaseOrder.ProjectId == ProjectId));
await _context.SetAllForeignKeysToNullExceptProject_BatchAsync<ProgressClaimDetail>(x=>(x.ProgressClaimVersion.ProjectId == ProjectId) || (x.ReportPeriod.ProjectId == ProjectId) || (x.ScheduleItem.ProjectId == ProjectId));
await _context.SetAllForeignKeysToNullExceptProject_BatchAsync<ProgressClaimSnapshot>(x=>(x.Lot.ProjectId == ProjectId) || (x.Ncr.ProjectId == ProjectId) || (x.ProgressClaimVersion.ProjectId == ProjectId) || (x.ReportPeriod.ProjectId == ProjectId) || (x.ScheduleItem.ProjectId == ProjectId) || (x.Variation.ProjectId == ProjectId));
await _context.SetAllForeignKeysToNullExceptProject_BatchAsync<PunchlistItem>(x=>(x.Punchlist.ProjectId == ProjectId));
await _context.SetAllForeignKeysToNullExceptProject_BatchAsync<PurchaseOrderDetail>(x=>(x.CostCode.ProjectId == ProjectId) || (x.PurchaseOrder.ProjectId == ProjectId));
await _context.SetAllForeignKeysToNullExceptProject_BatchAsync<Receipt>(x=>(x.PurchaseOrder.ProjectId == ProjectId));
await _context.SetAllForeignKeysToNullExceptProject_BatchAsync<ReceiptDetail>(x=>(x.CostCode.ProjectId == ProjectId));
await _context.SetAllForeignKeysToNullExceptProject_BatchAsync<Revision>(x=>(x.CpDocument.ProjectId == ProjectId));
await _context.SetAllForeignKeysToNullExceptProject_BatchAsync<RiskActivityStep>(x=>(x.RiskActivity.ProjectId == ProjectId));
await _context.SetAllForeignKeysToNullExceptProject_BatchAsync<SchedCostCode>(x=>(x.CostCode.ProjectId == ProjectId) || (x.ScheduleItem.ProjectId == ProjectId));
await _context.SetAllForeignKeysToNullExceptProject_BatchAsync<SiteDiaryCost>(x=>(x.Resource.ProjectId == ProjectId) || (x.SiteDiary.ProjectId == ProjectId) || (x.Supplier.ProjectId == ProjectId));
await _context.SetAllForeignKeysToNullExceptProject_BatchAsync<SiteDiaryCostCode>(x=>(x.CostCode.ProjectId == ProjectId));
await _context.SetAllForeignKeysToNullExceptProject_BatchAsync<SiteVisitor>(x=>(x.SiteDiary.ProjectId == ProjectId));
await _context.SetAllForeignKeysToNullExceptProject_BatchAsync<SupplierDivision>(x=>(x.Supplier.ProjectId == ProjectId));
await _context.SetAllForeignKeysToNullExceptProject_BatchAsync<TestCoordinate>(x=>(x.TestRequest.ProjectId == ProjectId));
await _context.SetAllForeignKeysToNullExceptProject_BatchAsync<TestPropertyItem>(x=>(x.TestPropertyGroup.ProjectId == ProjectId));
await _context.SetAllForeignKeysToNullExceptProject_BatchAsync<TestReqEmail>(x=>(x.EmailLog.ProjectId == ProjectId) || (x.TestRequest.ProjectId == ProjectId));
await _context.SetAllForeignKeysToNullExceptProject_BatchAsync<TestRequestProperty>(x=>(x.TestRequest.ProjectId == ProjectId));
await _context.SetAllForeignKeysToNullExceptProject_BatchAsync<TestRequestTest>(x=>(x.ControlLine.ProjectId == ProjectId) || (x.ScheduleItem.ProjectId == ProjectId) || (x.TestMethod.ProjectId == ProjectId) || (x.TestRequest.ProjectId == ProjectId));
await _context.SetAllForeignKeysToNullExceptProject_BatchAsync<TestResultField>(x=>(x.TestMethod.ProjectId == ProjectId));
await _context.SetAllForeignKeysToNullExceptProject_BatchAsync<TestSchedule>(x=>(x.Lot.ProjectId == ProjectId) || (x.ScheduleItem.ProjectId == ProjectId));
await _context.SetAllForeignKeysToNullExceptProject_BatchAsync<TestSummary>(x=>(x.TestMethod.ProjectId == ProjectId));
await _context.SetAllForeignKeysToNullExceptProject_BatchAsync<TransmittalItem>(x=>(x.CpDocument.ProjectId == ProjectId) || (x.Transmittal.ProjectId == ProjectId));
await _context.SetAllForeignKeysToNullExceptProject_BatchAsync<VariationCostCode>(x=>(x.CostCode.ProjectId == ProjectId) || (x.Variation.ProjectId == ProjectId));
await _context.SetAllForeignKeysToNullExceptProject_BatchAsync<VariationEstimate>(x=>(x.Variation.ProjectId == ProjectId));
await _context.SetAllForeignKeysToNullExceptProject_BatchAsync<VariationLot>(x=>(x.Lot.ProjectId == ProjectId) || (x.Variation.ProjectId == ProjectId));
await _context.SetAllForeignKeysToNullExceptProject_BatchAsync<VariationSchedule>(x=>(x.ScheduleItem.ProjectId == ProjectId) || (x.Variation.ProjectId == ProjectId));
await _context.SetAllForeignKeysToNullExceptProject_BatchAsync<VrnInstruction>(x=>(x.Instruction.ProjectId == ProjectId) || (x.Variation.ProjectId == ProjectId));
await _context.SetAllForeignKeysToNullExceptProject_BatchAsync<VrnWaypoint>(x=>(x.Variation.ProjectId == ProjectId));
await _context.SetAllForeignKeysToNullExceptProject_BatchAsync<WorkflowAction>(x=>(x.Workflow.ProjectId == ProjectId));
await _context.SetAllForeignKeysToNullExceptProject_BatchAsync<WorkflowLog>(x=>(x.Workflow.ProjectId == ProjectId));
await _context.SetAllForeignKeysToNullExceptProject_BatchAsync<WorkflowStep>(x=>(x.Workflow.ProjectId == ProjectId));
await _context.SetAllForeignKeysToNullExceptProject_BatchAsync<WorkSchedule>(x=>(x.ScheduleItem.ProjectId == ProjectId) || (x.WorkType.ProjectId == ProjectId));
await _context.SetAllForeignKeysToNullExceptProject_BatchAsync<Approval>(x=>x.ProjectId == ProjectId);
await _context.SetAllForeignKeysToNullExceptProject_BatchAsync<ApprovalWorkflow>(x=>x.ProjectId == ProjectId);
await _context.SetAllForeignKeysToNullExceptProject_BatchAsync<AreaCode>(x=>x.ProjectId == ProjectId);
await _context.SetAllForeignKeysToNullExceptProject_BatchAsync<Atp>(x=>x.ProjectId == ProjectId);
await _context.SetAllForeignKeysToNullExceptProject_BatchAsync<Constant>(x=>x.ProjectId == ProjectId);
await _context.SetAllForeignKeysToNullExceptProject_BatchAsync<ContractNotice>(x=>x.ProjectId == ProjectId);
await _context.SetAllForeignKeysToNullExceptProject_BatchAsync<ContractNoticeTemplate>(x=>x.ProjectId == ProjectId);
await _context.SetAllForeignKeysToNullExceptProject_BatchAsync<ControlLine>(x=>x.ProjectId == ProjectId);
await _context.SetAllForeignKeysToNullExceptProject_BatchAsync<CostCode>(x=>x.ProjectId == ProjectId);
await _context.SetAllForeignKeysToNullExceptProject_BatchAsync<CpDocument>(x=>x.ProjectId == ProjectId);
await _context.SetAllForeignKeysToNullExceptProject_BatchAsync<CustomRegister>(x=>x.ProjectId == ProjectId);
await _context.SetAllForeignKeysToNullExceptProject_BatchAsync<DayCost>(x=>x.ProjectId == ProjectId);
await _context.SetAllForeignKeysToNullExceptProject_BatchAsync<EmailLog>(x=>x.ProjectId == ProjectId);
await _context.SetAllForeignKeysToNullExceptProject_BatchAsync<FileStoreDoc>(x=>x.ProjectId == ProjectId);
await _context.SetAllForeignKeysToNullExceptProject_BatchAsync<ForecastVersion>(x=>x.ProjectId == ProjectId);
await _context.SetAllForeignKeysToNullExceptProject_BatchAsync<ImageLayer>(x=>x.ProjectId == ProjectId);
await _context.SetAllForeignKeysToNullExceptProject_BatchAsync<Incident>(x=>x.ProjectId == ProjectId);
await _context.SetAllForeignKeysToNullExceptProject_BatchAsync<Instruction>(x=>x.ProjectId == ProjectId);
await _context.SetAllForeignKeysToNullExceptProject_BatchAsync<Insurance>(x=>x.ProjectId == ProjectId);
await _context.SetAllForeignKeysToNullExceptProject_BatchAsync<Invoice>(x=>x.ProjectId == ProjectId);
await _context.SetAllForeignKeysToNullExceptProject_BatchAsync<Itp>(x=>x.ProjectId == ProjectId);
await _context.SetAllForeignKeysToNullExceptProject_BatchAsync<ItpTesting>(x=>(x.TestMethod.ProjectId == ProjectId));
await _context.SetAllForeignKeysToNullExceptProject_BatchAsync<KeyDate>(x=>x.ProjectId == ProjectId);
await _context.SetAllForeignKeysToNullExceptProject_BatchAsync<Lot>(x=>x.ProjectId == ProjectId);
await _context.SetAllForeignKeysToNullExceptProject_BatchAsync<LotItpTest>(x=>(x.TestMethod.ProjectId == ProjectId));
await _context.SetAllForeignKeysToNullExceptProject_BatchAsync<Ncr>(x=>x.ProjectId == ProjectId);
await _context.SetAllForeignKeysToNullExceptProject_BatchAsync<Personnel>(x=>x.ProjectId == ProjectId);
await _context.SetAllForeignKeysToNullExceptProject_BatchAsync<Photo>(x=>x.ProjectId == ProjectId);
await _context.SetAllForeignKeysToNullExceptProject_BatchAsync<Production>(x=>x.ProjectId == ProjectId);
await _context.SetAllForeignKeysToNullExceptProject_BatchAsync<ProgressClaimVersion>(x=>x.ProjectId == ProjectId);
await _context.SetAllForeignKeysToNullExceptProject_BatchAsync<ProjectReport>(x=>x.ProjectId == ProjectId);
await _context.SetAllForeignKeysToNullExceptProject_BatchAsync<ProjectUser>(x=>x.ProjectId == ProjectId);
await _context.SetAllForeignKeysToNullExceptProject_BatchAsync<Punchlist>(x=>x.ProjectId == ProjectId);
await _context.SetAllForeignKeysToNullExceptProject_BatchAsync<PurchaseOrder>(x=>x.ProjectId == ProjectId);
await _context.SetAllForeignKeysToNullExceptProject_BatchAsync<ReportPeriod>(x=>x.ProjectId == ProjectId);
await _context.SetAllForeignKeysToNullExceptProject_BatchAsync<Resource>(x=>x.ProjectId == ProjectId);
await _context.SetAllForeignKeysToNullExceptProject_BatchAsync<RiskActivity>(x=>x.ProjectId == ProjectId);
await _context.SetAllForeignKeysToNullExceptProject_BatchAsync<RiskTemplate>(x=>x.ProjectId == ProjectId);
await _context.SetAllForeignKeysToNullExceptProject_BatchAsync<ScheduleItem>(x=>x.ProjectId == ProjectId);
await _context.SetAllForeignKeysToNullExceptProject_BatchAsync<ScheduleTemplate>(x=>x.ProjectId == ProjectId);
await _context.SetAllForeignKeysToNullExceptProject_BatchAsync<SiteDiary>(x=>x.ProjectId == ProjectId);
await _context.SetAllForeignKeysToNullExceptProject_BatchAsync<SupplierLink>(x=>x.ProjectId == ProjectId);
await _context.SetAllForeignKeysToNullExceptProject_BatchAsync<Synopsis>(x=>x.ProjectId == ProjectId);
await _context.SetAllForeignKeysToNullExceptProject_BatchAsync<SystemProjectControl>(x=>x.ProjectId == ProjectId);
await _context.SetAllForeignKeysToNullExceptProject_BatchAsync<SystemUserControl>(x=>x.ProjectId == ProjectId);
await _context.SetAllForeignKeysToNullExceptProject_BatchAsync<TagCode>(x=>x.ProjectId == ProjectId);
await _context.SetAllForeignKeysToNullExceptProject_BatchAsync<Template>(x=>x.ProjectId == ProjectId);
await _context.SetAllForeignKeysToNullExceptProject_BatchAsync<TestMethod>(x=>x.ProjectId == ProjectId);
await _context.SetAllForeignKeysToNullExceptProject_BatchAsync<TestPropertyGroup>(x=>x.ProjectId == ProjectId);
await _context.SetAllForeignKeysToNullExceptProject_BatchAsync<TestRequest>(x=>x.ProjectId == ProjectId);
await _context.SetAllForeignKeysToNullExceptProject_BatchAsync<Transmittal>(x=>x.ProjectId == ProjectId);
await _context.SetAllForeignKeysToNullExceptProject_BatchAsync<Unit>(x=>x.ProjectId == ProjectId);
await _context.SetAllForeignKeysToNullExceptProject_BatchAsync<UserInvite>(x=>x.ProjectId == ProjectId);
await _context.SetAllForeignKeysToNullExceptProject_BatchAsync<UserRole>(x=>x.ProjectId == ProjectId);
await _context.SetAllForeignKeysToNullExceptProject_BatchAsync<Variation>(x=>x.ProjectId == ProjectId);
await _context.SetAllForeignKeysToNullExceptProject_BatchAsync<Workflow>(x=>x.ProjectId == ProjectId);
await _context.SetAllForeignKeysToNullExceptProject_BatchAsync<WorkType>(x=>x.ProjectId == ProjectId);
                await _context.Set<ChecklistUser>().Where(x => x.LotItp.Lot.ProjectId == ProjectId).DeleteAsync();
await _context.Set<ForecastCashflow>().Where(x => x.ForecastDetail.ForecastVersion.ProjectId == ProjectId).DeleteAsync();
await _context.Set<ForecastCostEstimate>().Where(x => x.ForecastDetail.ForecastVersion.ProjectId == ProjectId).DeleteAsync();
await _context.Set<LotItpQty>().Where(x => x.LotItp.Lot.ProjectId == ProjectId).DeleteAsync();
await _context.Set<RiskHazard>().Where(x => x.RiskActivityStep.RiskActivity.ProjectId == ProjectId).DeleteAsync();
await _context.Set<TestResult>().Where(x => x.TestRequestTest.TestRequest.ProjectId == ProjectId).DeleteAsync();
await _context.Set<WorkflowActionPoint>().Where(x => x.WorkflowAction.Workflow.ProjectId == ProjectId).DeleteAsync();
await _context.Set<WorkflowActionRole>().Where(x => x.WorkflowAction.Workflow.ProjectId == ProjectId).DeleteAsync();
await _context.Set<WorkflowActionUser>().Where(x => x.WorkflowAction.Workflow.ProjectId == ProjectId).DeleteAsync();
await _context.Set<LotDoc>().Where(x=> x.#.ProjectId == ProjectId).DeleteAsync();
await _context.Set<Notification>().Where(x=> x.#.ProjectId == ProjectId).DeleteAsync();
await _context.Set<ApprovalCc>().Where(x=>(x.Approval.ProjectId == ProjectId)).DeleteAsync();
await _context.Set<ApprovalEmail>().Where(x=>(x.Approval.ProjectId == ProjectId) || (x.EmailLog.ProjectId == ProjectId)).DeleteAsync();
await _context.Set<ApprovalItpDetail>().Where(x=>(x.Approval.ProjectId == ProjectId)).DeleteAsync();
await _context.Set<ApprovalLot>().Where(x=>(x.Approval.ProjectId == ProjectId) || (x.Lot.ProjectId == ProjectId)).DeleteAsync();
await _context.Set<ApprovalLotItpDetail>().Where(x=>(x.Approval.ProjectId == ProjectId)).DeleteAsync();
await _context.Set<ApprovalLotQty>().Where(x=>(x.Approval.ProjectId == ProjectId)).DeleteAsync();
await _context.Set<ApprovalNcr>().Where(x=>(x.Approval.ProjectId == ProjectId) || (x.Ncr.ProjectId == ProjectId)).DeleteAsync();
await _context.Set<ApprovalTo>().Where(x=>(x.Approval.ProjectId == ProjectId)).DeleteAsync();
await _context.Set<ApprovalWorkflowAddressee>().Where(x=>(x.ApprovalWorkflow.ProjectId == ProjectId)).DeleteAsync();
await _context.Set<AtpLot>().Where(x=>(x.Atp.ProjectId == ProjectId) || (x.Lot.ProjectId == ProjectId)).DeleteAsync();
await _context.Set<CnApproval>().Where(x=>(x.Approval.ProjectId == ProjectId) || (x.ContractNotice.ProjectId == ProjectId)).DeleteAsync();
await _context.Set<CnControlledDoc>().Where(x=>(x.ContractNotice.ProjectId == ProjectId) || (x.CpDocument.ProjectId == ProjectId)).DeleteAsync();
await _context.Set<CnEmail>().Where(x=>(x.ContractNotice.ProjectId == ProjectId) || (x.EmailLog.ProjectId == ProjectId)).DeleteAsync();
await _context.Set<CnIncident>().Where(x=>(x.ContractNotice.ProjectId == ProjectId) || (x.Incident.ProjectId == ProjectId)).DeleteAsync();
await _context.Set<CnInstruction>().Where(x=>(x.ContractNotice.ProjectId == ProjectId) || (x.Instruction.ProjectId == ProjectId)).DeleteAsync();
await _context.Set<CnItp>().Where(x=>(x.ContractNotice.ProjectId == ProjectId) || (x.Itp.ProjectId == ProjectId)).DeleteAsync();
await _context.Set<CnLot>().Where(x=>(x.ContractNotice.ProjectId == ProjectId) || (x.Lot.ProjectId == ProjectId)).DeleteAsync();
await _context.Set<CnNotice>().Where(x=>(x.ContractNotice_CnId1.ProjectId == ProjectId) || (x.ContractNotice_CnId2.ProjectId == ProjectId)).DeleteAsync();
await _context.Set<CnPhoto>().Where(x=>(x.ContractNotice.ProjectId == ProjectId) || (x.Photo.ProjectId == ProjectId)).DeleteAsync();
await _context.Set<CnResponse>().Where(x=>(x.ContractNotice.ProjectId == ProjectId)).DeleteAsync();
await _context.Set<CnTo>().Where(x=>(x.ContractNotice.ProjectId == ProjectId)).DeleteAsync();
await _context.Set<CnVariation>().Where(x=>(x.ContractNotice.ProjectId == ProjectId) || (x.Variation.ProjectId == ProjectId)).DeleteAsync();
await _context.Set<ControlLinePoint>().Where(x=>(x.ControlLine.ProjectId == ProjectId)).DeleteAsync();
await _context.Set<CostCodeCustomRegItem>().Where(x=>(x.CostCode.ProjectId == ProjectId)).DeleteAsync();
await _context.Set<CustomRegisterItem>().Where(x=>(x.CustomRegister.ProjectId == ProjectId)).DeleteAsync();
await _context.Set<DaycostCostCode>().Where(x=>(x.CostCode.ProjectId == ProjectId) || (x.DayCost.ProjectId == ProjectId)).DeleteAsync();
await _context.Set<Distribution>().Where(x=>(x.CpDocument.ProjectId == ProjectId)).DeleteAsync();
await _context.Set<ForecastDetail>().Where(x=>(x.CostCode.ProjectId == ProjectId) || (x.ForecastVersion.ProjectId == ProjectId)).DeleteAsync();
await _context.Set<ForecastWinLoss>().Where(x=>(x.ForecastVersion.ProjectId == ProjectId)).DeleteAsync();
await _context.Set<ForecastWlDistro>().Where(x=>(x.CostCode.ProjectId == ProjectId)).DeleteAsync();
await _context.Set<FsApproval>().Where(x=>(x.Approval.ProjectId == ProjectId) || (x.FileStoreDoc.ProjectId == ProjectId)).DeleteAsync();
await _context.Set<FsDoc>().Where(x=>(x.CpDocument.ProjectId == ProjectId) || (x.FileStoreDoc.ProjectId == ProjectId)).DeleteAsync();
await _context.Set<FsEmail>().Where(x=>(x.EmailLog.ProjectId == ProjectId) || (x.FileStoreDoc.ProjectId == ProjectId)).DeleteAsync();
await _context.Set<FsIncident>().Where(x=>(x.FileStoreDoc.ProjectId == ProjectId) || (x.Incident.ProjectId == ProjectId)).DeleteAsync();
await _context.Set<FsInstruction>().Where(x=>(x.FileStoreDoc.ProjectId == ProjectId) || (x.Instruction.ProjectId == ProjectId)).DeleteAsync();
await _context.Set<FsLot>().Where(x=>(x.FileStoreDoc.ProjectId == ProjectId) || (x.Lot.ProjectId == ProjectId)).DeleteAsync();
await _context.Set<FsNcr>().Where(x=>(x.FileStoreDoc.ProjectId == ProjectId) || (x.Ncr.ProjectId == ProjectId)).DeleteAsync();
await _context.Set<FsNotice>().Where(x=>(x.ContractNotice.ProjectId == ProjectId) || (x.FileStoreDoc.ProjectId == ProjectId)).DeleteAsync();
await _context.Set<FsPurchaseOrder>().Where(x=>(x.FileStoreDoc.ProjectId == ProjectId) || (x.PurchaseOrder.ProjectId == ProjectId)).DeleteAsync();
await _context.Set<FsSupplier>().Where(x=>(x.FileStoreDoc.ProjectId == ProjectId) || (x.Supplier.ProjectId == ProjectId)).DeleteAsync();
await _context.Set<FsTestReq>().Where(x=>(x.FileStoreDoc.ProjectId == ProjectId) || (x.TestRequest.ProjectId == ProjectId)).DeleteAsync();
await _context.Set<FsVariation>().Where(x=>(x.FileStoreDoc.ProjectId == ProjectId) || (x.Variation.ProjectId == ProjectId)).DeleteAsync();
await _context.Set<FsWorkflowLog>().Where(x=>(x.FileStoreDoc.ProjectId == ProjectId)).DeleteAsync();
await _context.Set<ImageLayerPoint>().Where(x=>(x.ImageLayer.ProjectId == ProjectId)).DeleteAsync();
await _context.Set<IncidentPerson>().Where(x=>(x.Incident.ProjectId == ProjectId)).DeleteAsync();
await _context.Set<InvoiceDispute>().Where(x=>(x.Invoice.ProjectId == ProjectId)).DeleteAsync();
await _context.Set<InvoiceOrder>().Where(x=>(x.Invoice.ProjectId == ProjectId) || (x.PurchaseOrder.ProjectId == ProjectId)).DeleteAsync();
await _context.Set<InvoiceRetention>().Where(x=>(x.Invoice.ProjectId == ProjectId)).DeleteAsync();
await _context.Set<ItpDetail>().Where(x=>(x.Itp.ProjectId == ProjectId)).DeleteAsync();
await _context.Set<ItpDetailWorkflow>().Where(x=>(x.ApprovalWorkflow.ProjectId == ProjectId)).DeleteAsync();
await _context.Set<ItpScheduleItem>().Where(x=>(x.Itp.ProjectId == ProjectId) || (x.ScheduleItem.ProjectId == ProjectId)).DeleteAsync();
await _context.Set<LotCoordinate>().Where(x=>(x.Lot.ProjectId == ProjectId)).DeleteAsync();
await _context.Set<LotCustomRegItem>().Where(x=>(x.Lot.ProjectId == ProjectId)).DeleteAsync();
await _context.Set<LotInstruction>().Where(x=>(x.Instruction.ProjectId == ProjectId) || (x.Lot.ProjectId == ProjectId)).DeleteAsync();
await _context.Set<LotItp>().Where(x=>(x.Itp.ProjectId == ProjectId) || (x.Lot.ProjectId == ProjectId)).DeleteAsync();
await _context.Set<LotItpDetail>().Where(x=>(x.ApprovalAtp.ProjectId == ProjectId) || (x.Approval.ProjectId == ProjectId) || (x.ApprovalLot.ProjectId == ProjectId) || (x.Ncr.ProjectId == ProjectId)).DeleteAsync();
await _context.Set<LotQuantity>().Where(x=>(x.Lot.ProjectId == ProjectId) || (x.Ncr.ProjectId == ProjectId) || (x.ScheduleItem.ProjectId == ProjectId) || (x.Variation.ProjectId == ProjectId)).DeleteAsync();
await _context.Set<LotRelation>().Where(x=>(x.Lot1.ProjectId == ProjectId) || (x.Lot2.ProjectId == ProjectId)).DeleteAsync();
await _context.Set<LotTag>().Where(x=>(x.Lot.ProjectId == ProjectId) || (x.TagCode.ProjectId == ProjectId)).DeleteAsync();
await _context.Set<LotUser>().Where(x=>(x.Lot.ProjectId == ProjectId)).DeleteAsync();
await _context.Set<NcrDocument>().Where(x=>(x.CpDocument.ProjectId == ProjectId) || (x.Ncr.ProjectId == ProjectId)).DeleteAsync();
await _context.Set<NcrLot>().Where(x=>(x.Lot.ProjectId == ProjectId) || (x.Ncr.ProjectId == ProjectId)).DeleteAsync();
await _context.Set<PhotoChecklistItem>().Where(x=>(x.Photo.ProjectId == ProjectId)).DeleteAsync();
await _context.Set<PhotoIncident>().Where(x=>(x.Incident.ProjectId == ProjectId) || (x.Photo.ProjectId == ProjectId)).DeleteAsync();
await _context.Set<PhotoLot>().Where(x=>(x.Lot.ProjectId == ProjectId) || (x.Photo.ProjectId == ProjectId)).DeleteAsync();
await _context.Set<PhotoNcr>().Where(x=>(x.Ncr.ProjectId == ProjectId) || (x.Photo.ProjectId == ProjectId)).DeleteAsync();
await _context.Set<PhotoVariation>().Where(x=>(x.Photo.ProjectId == ProjectId) || (x.Variation.ProjectId == ProjectId)).DeleteAsync();
await _context.Set<PoEmail>().Where(x=>(x.EmailLog.ProjectId == ProjectId) || (x.PurchaseOrder.ProjectId == ProjectId)).DeleteAsync();
await _context.Set<ProgressClaimDetail>().Where(x=>(x.ProgressClaimVersion.ProjectId == ProjectId) || (x.ReportPeriod.ProjectId == ProjectId) || (x.ScheduleItem.ProjectId == ProjectId)).DeleteAsync();
await _context.Set<ProgressClaimSnapshot>().Where(x=>(x.Lot.ProjectId == ProjectId) || (x.Ncr.ProjectId == ProjectId) || (x.ProgressClaimVersion.ProjectId == ProjectId) || (x.ReportPeriod.ProjectId == ProjectId) || (x.ScheduleItem.ProjectId == ProjectId) || (x.Variation.ProjectId == ProjectId)).DeleteAsync();
await _context.Set<PunchlistItem>().Where(x=>(x.Punchlist.ProjectId == ProjectId)).DeleteAsync();
await _context.Set<PurchaseOrderDetail>().Where(x=>(x.CostCode.ProjectId == ProjectId) || (x.PurchaseOrder.ProjectId == ProjectId)).DeleteAsync();
await _context.Set<Receipt>().Where(x=>(x.PurchaseOrder.ProjectId == ProjectId)).DeleteAsync();
await _context.Set<ReceiptDetail>().Where(x=>(x.CostCode.ProjectId == ProjectId)).DeleteAsync();
await _context.Set<Revision>().Where(x=>(x.CpDocument.ProjectId == ProjectId)).DeleteAsync();
await _context.Set<RiskActivityStep>().Where(x=>(x.RiskActivity.ProjectId == ProjectId)).DeleteAsync();
await _context.Set<SchedCostCode>().Where(x=>(x.CostCode.ProjectId == ProjectId) || (x.ScheduleItem.ProjectId == ProjectId)).DeleteAsync();
await _context.Set<SiteDiaryCost>().Where(x=>(x.Resource.ProjectId == ProjectId) || (x.SiteDiary.ProjectId == ProjectId) || (x.Supplier.ProjectId == ProjectId)).DeleteAsync();
await _context.Set<SiteDiaryCostCode>().Where(x=>(x.CostCode.ProjectId == ProjectId)).DeleteAsync();
await _context.Set<SiteVisitor>().Where(x=>(x.SiteDiary.ProjectId == ProjectId)).DeleteAsync();
await _context.Set<SupplierDivision>().Where(x=>(x.Supplier.ProjectId == ProjectId)).DeleteAsync();
await _context.Set<TestCoordinate>().Where(x=>(x.TestRequest.ProjectId == ProjectId)).DeleteAsync();
await _context.Set<TestPropertyItem>().Where(x=>(x.TestPropertyGroup.ProjectId == ProjectId)).DeleteAsync();
await _context.Set<TestReqEmail>().Where(x=>(x.EmailLog.ProjectId == ProjectId) || (x.TestRequest.ProjectId == ProjectId)).DeleteAsync();
await _context.Set<TestRequestProperty>().Where(x=>(x.TestRequest.ProjectId == ProjectId)).DeleteAsync();
await _context.Set<TestRequestTest>().Where(x=>(x.ControlLine.ProjectId == ProjectId) || (x.ScheduleItem.ProjectId == ProjectId) || (x.TestMethod.ProjectId == ProjectId) || (x.TestRequest.ProjectId == ProjectId)).DeleteAsync();
await _context.Set<TestResultField>().Where(x=>(x.TestMethod.ProjectId == ProjectId)).DeleteAsync();
await _context.Set<TestSchedule>().Where(x=>(x.Lot.ProjectId == ProjectId) || (x.ScheduleItem.ProjectId == ProjectId)).DeleteAsync();
await _context.Set<TestSummary>().Where(x=>(x.TestMethod.ProjectId == ProjectId)).DeleteAsync();
await _context.Set<TransmittalItem>().Where(x=>(x.CpDocument.ProjectId == ProjectId) || (x.Transmittal.ProjectId == ProjectId)).DeleteAsync();
await _context.Set<VariationCostCode>().Where(x=>(x.CostCode.ProjectId == ProjectId) || (x.Variation.ProjectId == ProjectId)).DeleteAsync();
await _context.Set<VariationEstimate>().Where(x=>(x.Variation.ProjectId == ProjectId)).DeleteAsync();
await _context.Set<VariationLot>().Where(x=>(x.Lot.ProjectId == ProjectId) || (x.Variation.ProjectId == ProjectId)).DeleteAsync();
await _context.Set<VariationSchedule>().Where(x=>(x.ScheduleItem.ProjectId == ProjectId) || (x.Variation.ProjectId == ProjectId)).DeleteAsync();
await _context.Set<VrnInstruction>().Where(x=>(x.Instruction.ProjectId == ProjectId) || (x.Variation.ProjectId == ProjectId)).DeleteAsync();
await _context.Set<VrnWaypoint>().Where(x=>(x.Variation.ProjectId == ProjectId)).DeleteAsync();
await _context.Set<WorkflowAction>().Where(x=>(x.Workflow.ProjectId == ProjectId)).DeleteAsync();
await _context.Set<WorkflowLog>().Where(x=>(x.Workflow.ProjectId == ProjectId)).DeleteAsync();
await _context.Set<WorkflowStep>().Where(x=>(x.Workflow.ProjectId == ProjectId)).DeleteAsync();
await _context.Set<WorkSchedule>().Where(x=>(x.ScheduleItem.ProjectId == ProjectId) || (x.WorkType.ProjectId == ProjectId)).DeleteAsync();
await _context.Set<Approval>().Where(x=>x.ProjectId == ProjectId).DeleteAsync();
await _context.Set<ApprovalWorkflow>().Where(x=>x.ProjectId == ProjectId).DeleteAsync();
await _context.Set<AreaCode>().Where(x=>x.ProjectId == ProjectId).DeleteAsync();
await _context.Set<Atp>().Where(x=>x.ProjectId == ProjectId).DeleteAsync();
await _context.Set<Constant>().Where(x=>x.ProjectId == ProjectId).DeleteAsync();
await _context.Set<ContractNotice>().Where(x=>x.ProjectId == ProjectId).DeleteAsync();
await _context.Set<ContractNoticeTemplate>().Where(x=>x.ProjectId == ProjectId).DeleteAsync();
await _context.Set<ControlLine>().Where(x=>x.ProjectId == ProjectId).DeleteAsync();
await _context.Set<CostCode>().Where(x=>x.ProjectId == ProjectId).DeleteAsync();
await _context.Set<CpDocument>().Where(x=>x.ProjectId == ProjectId).DeleteAsync();
await _context.Set<CustomRegister>().Where(x=>x.ProjectId == ProjectId).DeleteAsync();
await _context.Set<DayCost>().Where(x=>x.ProjectId == ProjectId).DeleteAsync();
await _context.Set<EmailLog>().Where(x=>x.ProjectId == ProjectId).DeleteAsync();
await _context.Set<FileStoreDoc>().Where(x=>x.ProjectId == ProjectId).DeleteAsync();
await _context.Set<ForecastVersion>().Where(x=>x.ProjectId == ProjectId).DeleteAsync();
await _context.Set<ImageLayer>().Where(x=>x.ProjectId == ProjectId).DeleteAsync();
await _context.Set<Incident>().Where(x=>x.ProjectId == ProjectId).DeleteAsync();
await _context.Set<Instruction>().Where(x=>x.ProjectId == ProjectId).DeleteAsync();
await _context.Set<Insurance>().Where(x=>x.ProjectId == ProjectId).DeleteAsync();
await _context.Set<Invoice>().Where(x=>x.ProjectId == ProjectId).DeleteAsync();
await _context.Set<Itp>().Where(x=>x.ProjectId == ProjectId).DeleteAsync();
await _context.Set<ItpTesting>().Where(x=>(x.TestMethod.ProjectId == ProjectId)).DeleteAsync();
await _context.Set<KeyDate>().Where(x=>x.ProjectId == ProjectId).DeleteAsync();
await _context.Set<Lot>().Where(x=>x.ProjectId == ProjectId).DeleteAsync();
await _context.Set<LotItpTest>().Where(x=>(x.TestMethod.ProjectId == ProjectId)).DeleteAsync();
await _context.Set<Ncr>().Where(x=>x.ProjectId == ProjectId).DeleteAsync();
await _context.Set<Personnel>().Where(x=>x.ProjectId == ProjectId).DeleteAsync();
await _context.Set<Photo>().Where(x=>x.ProjectId == ProjectId).DeleteAsync();
await _context.Set<Production>().Where(x=>x.ProjectId == ProjectId).DeleteAsync();
await _context.Set<ProgressClaimVersion>().Where(x=>x.ProjectId == ProjectId).DeleteAsync();
await _context.Set<ProjectReport>().Where(x=>x.ProjectId == ProjectId).DeleteAsync();
await _context.Set<ProjectUser>().Where(x=>x.ProjectId == ProjectId).DeleteAsync();
await _context.Set<Punchlist>().Where(x=>x.ProjectId == ProjectId).DeleteAsync();
await _context.Set<PurchaseOrder>().Where(x=>x.ProjectId == ProjectId).DeleteAsync();
await _context.Set<ReportPeriod>().Where(x=>x.ProjectId == ProjectId).DeleteAsync();
await _context.Set<Resource>().Where(x=>x.ProjectId == ProjectId).DeleteAsync();
await _context.Set<RiskActivity>().Where(x=>x.ProjectId == ProjectId).DeleteAsync();
await _context.Set<RiskTemplate>().Where(x=>x.ProjectId == ProjectId).DeleteAsync();
await _context.Set<ScheduleItem>().Where(x=>x.ProjectId == ProjectId).DeleteAsync();
await _context.Set<ScheduleTemplate>().Where(x=>x.ProjectId == ProjectId).DeleteAsync();
await _context.Set<SiteDiary>().Where(x=>x.ProjectId == ProjectId).DeleteAsync();
await _context.Set<SupplierLink>().Where(x=>x.ProjectId == ProjectId).DeleteAsync();
await _context.Set<Synopsis>().Where(x=>x.ProjectId == ProjectId).DeleteAsync();
await _context.Set<SystemProjectControl>().Where(x=>x.ProjectId == ProjectId).DeleteAsync();
await _context.Set<SystemUserControl>().Where(x=>x.ProjectId == ProjectId).DeleteAsync();
await _context.Set<TagCode>().Where(x=>x.ProjectId == ProjectId).DeleteAsync();
await _context.Set<Template>().Where(x=>x.ProjectId == ProjectId).DeleteAsync();
await _context.Set<TestMethod>().Where(x=>x.ProjectId == ProjectId).DeleteAsync();
await _context.Set<TestPropertyGroup>().Where(x=>x.ProjectId == ProjectId).DeleteAsync();
await _context.Set<TestRequest>().Where(x=>x.ProjectId == ProjectId).DeleteAsync();
await _context.Set<Transmittal>().Where(x=>x.ProjectId == ProjectId).DeleteAsync();
await _context.Set<Unit>().Where(x=>x.ProjectId == ProjectId).DeleteAsync();
await _context.Set<UserInvite>().Where(x=>x.ProjectId == ProjectId).DeleteAsync();
await _context.Set<UserRole>().Where(x=>x.ProjectId == ProjectId).DeleteAsync();
await _context.Set<Variation>().Where(x=>x.ProjectId == ProjectId).DeleteAsync();
await _context.Set<Workflow>().Where(x=>x.ProjectId == ProjectId).DeleteAsync();
await _context.Set<WorkType>().Where(x=>x.ProjectId == ProjectId).DeleteAsync();
                await _context.Projects.Where(x => x.ProjectId == ProjectId).DeleteAsync();
                _tx.Commit();
                await _context.Users.Where(x => x.ProjectId == ProjectId && x.Username == null).DeleteAsync();
            }
            catch (Exception ex)
            {
                if (_context.Database.CurrentTransaction!=null) _tx.Rollback();
                Log.Error(ex, "Error deleting Project(DeleteProjectAsync)");
                throw;
            }
        }
    }